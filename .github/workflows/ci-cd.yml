name: 🐰 RabbitMQ Infrastructure - CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths: ['docker-compose.yml', 'scripts/**', '.github/workflows/**', 'README.md']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production, staging]

# ----------------------------------------------------------------------
# PARÂMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: conexao-de-sorte-rabbitmq-infraestrutura
  TZ: America/Sao_Paulo
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}

# Configuração de permissões para GitHub OIDC
permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euo pipefail {0}

# ----------------------------------------------------------------------
# JOB 1 ▸ VALIDAÇÃO DO AMBIENTE
# ----------------------------------------------------------------------

jobs:
  validate-compose:
    runs-on: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-rabbitmq-infraestrutura]
    name: 🔍 Validate Docker Compose
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set Dummy Environment Variables for Validation
        run: |
          echo "RABBITMQ_USERNAME=dummy_user_for_validation" >> $GITHUB_ENV
          echo "RABBITMQ_PASSWORD=dummy_password_for_validation" >> $GITHUB_ENV
          echo "✅ Dummy environment variables (RABBITMQ_USERNAME, RABBITMQ_PASSWORD) set for validation"

      - name: 🔍 Validate docker-compose files
        timeout-minutes: 2
        run: |
          # Validar sintaxe do docker-compose.yml principal (produção)
          docker compose -f docker-compose.yml config -q
          echo "✅ Docker Compose syntax is valid"

      - name: 🧮 Render Docker Stack configuration
        timeout-minutes: 2
        run: |
          # Garantir que o arquivo é válido para uso com docker stack deploy
          docker stack config -c ./docker-compose.yml > /tmp/docker-stack-rendered.yml
          echo "✅ Docker Stack configuration rendered successfully"

      - name: 🧪 Test Services Definition
        timeout-minutes: 3
        run: |
          # Verificar se todos os serviços essenciais estão definidos
          echo "🔍 Debug: Listing all available services:"
          all_services=$(docker compose -f docker-compose.yml config --services | sort)
          echo "$all_services"

          echo ""
          echo "🧪 Testing each service individually:"
          services=("rabbitmq")

          missing=()
          for service in "${services[@]}"; do
            if echo "$all_services" | grep -Fxq "$service"; then
              echo "✅ Service '$service' found in main docker-compose.yml"
            else
              missing+=("$service")
            fi
          done

          [ ${#missing[@]} -eq 0 ] || { echo "❌ Missing services: ${missing[*]}"; exit 1; }

      - name: 🌐 Validate Network Configuration
        timeout-minutes: 2
        run: |
          # Verificar se a rede externa está configurada
          if docker network inspect conexao-network-swarm >/dev/null 2>&1; then
            echo "✅ Network 'conexao-network-swarm' configured"
          else
            echo "❌ Network 'conexao-network-swarm' missing"
            exit 1
          fi

      - name: 💾 Validate Volumes Configuration
        timeout-minutes: 2
        run: |
          volumes=("rabbitmq_data")
          for volume in "${volumes[@]}"; do
            if docker volume inspect "$volume" >/dev/null 2>&1; then
              echo "✅ Volume '$volume' configured"
            else
              echo "❌ Volume '$volume' missing"
              exit 1
            fi
          done

# ----------------------------------------------------------------------
# JOB 2 ▸ SECURITY SCAN
# ----------------------------------------------------------------------

  security-scan:
    runs-on: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-rabbitmq-infraestrutura]
    name: 🔐 Security Scan
    timeout-minutes: 15
    needs: [validate-compose]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Check for hardcoded secrets
        timeout-minutes: 3
        run: |
          if [ -f "docker-compose.yml" ]; then
            if grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "file:" | grep -v "external:" | grep -E "password:[[:space:]]*[^[:space:]\$]"; then
              echo "❌ Found hardcoded passwords in compose files"
              echo "Lines with potential hardcoded passwords:"
              grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "file:" | grep -v "external:" | grep -E "password:[[:space:]]*[^[:space:]\$]" || true
              exit 1
            else
              echo "✅ No hardcoded passwords found"
            fi
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

      - name: 🔐 Check environment variables
        timeout-minutes: 2
        run: |
          if [ -f "docker-compose.yml" ]; then
            required_envs=("RABBITMQ_USERNAME" "RABBITMQ_PASSWORD")
            for env_var in "${required_envs[@]}"; do
              if ! grep -q "$env_var" docker-compose.yml; then
                echo "❌ Environment variable $env_var not found in docker-compose.yml"
                exit 1
              else
                echo "✅ Environment variable $env_var found"
              fi
            done
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

      - name: 🔍 Scan image versions for vulnerabilities
        timeout-minutes: 10
        run: |
          if [ -f "docker-compose.yml" ]; then
            # Verificar se imagens usam tags específicas (evitar latest)
            if grep -q ":latest" docker-compose.yml; then
              echo "❌ Uso de tags 'latest' detectado - não recomendado para produção"
              exit 1
            else
              echo "✅ Todas as imagens usam tags específicas"
            fi
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 3 ▸ DEPLOY PARA PRODUÇÃO
# ----------------------------------------------------------------------

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-rabbitmq-infraestrutura]
    name: 🚀 Deploy to Production
    timeout-minutes: 30
    needs: [validate-compose, security-scan]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Validar e configurar secrets Azure OIDC infraestrutura
        shell: bash
        run: |
          echo "🔐 Validando secrets OIDC para infraestrutura RabbitMQ..."
          echo "📁 Repositório: ${{ github.repository }}"

          # Verificar se secrets estão configurados neste repositório específico
          MISSING_SECRETS=""
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS AZURE_CLIENT_ID"
          fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS AZURE_TENANT_ID"
          fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS AZURE_SUBSCRIPTION_ID"
          fi
          if [ -z "${{ secrets.AZURE_KEYVAULT_NAME }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS AZURE_KEYVAULT_NAME"
          fi

          if [ -n "$MISSING_SECRETS" ]; then
            echo "❌ Secrets ausentes no repositório ${{ github.repository }}:$MISSING_SECRETS"
            echo ""
            echo "🔧 SOLUÇÃO NECESSÁRIA:"
            echo "1. Acessar: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Adicionar os seguintes Repository secrets:"
            echo "   - AZURE_CLIENT_ID: [Service Principal Client ID]"
            echo "   - AZURE_TENANT_ID: [Azure Tenant ID]"
            echo "   - AZURE_SUBSCRIPTION_ID: [Azure Subscription ID]"
            echo "   - AZURE_KEYVAULT_NAME: [Nome do Key Vault]"
            echo ""
            echo "💡 Os values devem ser copiados do repositório principal ou do Azure Portal"
            echo ""
            echo "⚠️  PULANDO DEPLOY - Secrets de infraestrutura não configurados"
            exit 0  # Exit com sucesso para não falhar o pipeline, mas pular deploy
          fi

          echo "✅ Secrets infraestrutura OIDC validados para ${{ github.repository }}"

      - name: 🔑 Azure Login (OIDC)
        uses: azure/login@v2
        timeout-minutes: 5
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: 🔍 Verificar conectividade Azure infraestrutura
        shell: bash
        run: |
          echo "🔍 Verificando conectividade Azure infraestrutura RabbitMQ..."

          if ACCOUNT_INFO=$(az account show --query "{name: name, id: id}" -o json 2>/dev/null); then
            echo "✅ Login Azure infraestrutura confirmado:"
            echo "$ACCOUNT_INFO" | jq -r '"  Subscription: \(.name) (\(.id))"'
          else
            echo "❌ Falha login Azure infraestrutura"
            exit 1
          fi

      - name: 🧹 Smart Cleanup - Remove existing RabbitMQ stack
        timeout-minutes: 10
        run: |
          set -euo pipefail
          STACK_NAME="conexao-de-sorte-rabbitmq-production"

          echo "🧹 Removendo stack RabbitMQ existente para deploy limpo..."

          if docker stack ls | grep -q "$STACK_NAME"; then
            echo "🔄 Removendo stack '$STACK_NAME'..."
            docker stack rm "$STACK_NAME"

            echo "⏰ Aguardando remoção completa da stack..."
            timeout=120
            elapsed=0
            while docker stack ls | grep -q "$STACK_NAME" && [ $elapsed -lt $timeout ]; do
              sleep 5
              elapsed=$((elapsed + 5))
              echo "⏳ Aguardando... ($elapsed/$timeout segundos)"
            done

            if docker stack ls | grep -q "$STACK_NAME"; then
              echo "❌ Falha ao remover a stack '$STACK_NAME'. Abortando pipeline."
              exit 1
            fi
            echo "✅ Stack '$STACK_NAME' removida."
          else
            echo "ℹ️ Stack '$STACK_NAME' não encontrada (primeira execução ou já removida)"
          fi

      - name: 🔐 Sync Azure KeyVault Secrets to Docker Swarm
        timeout-minutes: 5
        run: |
          set -euo pipefail
          STACK_NAME="conexao-de-sorte-rabbitmq-production"

          echo "🔍 Verificando se a stack '$STACK_NAME' foi removida antes da sincronização..."
          if docker stack ls | grep -q "$STACK_NAME"; then
            echo "❌ Stack '$STACK_NAME' ainda está presente. Abortando sincronização de secrets."
            exit 1
          fi
          echo "✅ Stack '$STACK_NAME' removida. Prosseguindo com sincronização de secrets."

          echo "🔐 Sincronizando secrets do Azure Key Vault para Docker Swarm..."
          echo "🏪 Key Vault: ${{ env.AZURE_KEYVAULT_NAME }}"

          # Executar script de sincronização
          chmod +x .github/workflows/scripts/sync-azure-keyvault-secrets.sh
          .github/workflows/scripts/sync-azure-keyvault-secrets.sh "${{ env.AZURE_KEYVAULT_NAME }}" "rabbitmq-infraestrutura" || {
            echo "❌ Timeout ou falha na sincronização de secrets após 5 minutos"
            echo "🔍 Verificando estado atual dos secrets..."
            docker secret ls --format "table {{.Name}}\t{{.CreatedAt}}" | head -10 || true
            exit 1
          }

      - name: 🔍 Validate Critical Secrets Created
        timeout-minutes: 2
        run: |
          # Verificar se os secrets críticos foram criados
          critical_secrets=("RABBITMQ_USERNAME" "RABBITMQ_PASSWORD")

          echo "🔍 Verificando se secrets críticos estão disponíveis no Docker Swarm..."

          for secret in "${critical_secrets[@]}"; do
            if docker secret inspect "$secret" >/dev/null 2>&1; then
              echo "✅ $secret: READY"
            else
              echo "❌ $secret: MISSING - ABORTING DEPLOY"
              exit 1
            fi
          done

          echo "✅ Todos os secrets críticos estão disponíveis para RabbitMQ - prosseguindo com deploy"

      - name: 🚀 Deploy RabbitMQ Stack to Production
        timeout-minutes: 15
        run: |
          set -euo pipefail
          STACK_NAME="conexao-de-sorte-rabbitmq-production"

          echo "🚀 Iniciando deploy da stack RabbitMQ para produção..."

          # Garantir que a stack foi removida antes do deploy
          if docker stack ls | grep -q "$STACK_NAME"; then
            echo "❌ Stack '$STACK_NAME' ainda está presente após etapa de remoção."
            echo "🔧 Verifique a etapa '🧹 Remove existing RabbitMQ stack'."
            exit 1
          fi
          echo "✅ Confirmação: stack '$STACK_NAME' removida. Prosseguindo com deploy em produção..."

          # Verificar se o arquivo de configuração existe
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ ERRO na configuração do docker-compose.yml para RabbitMQ PRODUÇÃO"
            echo "🔍 Listando secrets disponíveis:"
            docker secret ls --format "table {{.Name}}\t{{.CreatedAt}}"
            exit 1
          fi

          # Deploy da stack utilizando docker-compose.yml (PRODUÇÃO)
          echo "🏗️ Executando deploy da stack '$STACK_NAME'..."
          docker stack deploy -c docker-compose.yml "$STACK_NAME"

          echo "⏰ Aguardando estabilização dos serviços RabbitMQ..."
          sleep 30

          echo "🔍 Verificando status dos serviços RabbitMQ..."
          docker service ls --filter name="${STACK_NAME}_*" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

      - name: 🧪 Health Check Validation RabbitMQ
        timeout-minutes: 10
        run: |
          set -euo pipefail
          STACK_NAME="conexao-de-sorte-rabbitmq-production"

          echo "🔍 Validating RabbitMQ service health..."

          # RabbitMQ health check
          RABBITMQ_CONTAINER=$(docker ps -q -f name="${STACK_NAME}_rabbitmq" | head -1)
          if [ -n "$RABBITMQ_CONTAINER" ]; then
            echo "🔍 Testing RabbitMQ connectivity..."

            # Aguardar até 5 minutos para RabbitMQ ficar disponível
            timeout=300
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              if docker exec "$RABBITMQ_CONTAINER" rabbitmq-diagnostics ping 2>/dev/null; then
                echo "✅ RabbitMQ health check passed em PRODUÇÃO"
                break
              else
                echo "⏳ RabbitMQ ainda não está pronto... ($elapsed/$timeout segundos)"
                sleep 10
                elapsed=$((elapsed + 10))
              fi
            done

            if [ $elapsed -ge $timeout ]; then
              echo "❌ RabbitMQ health check failed em PRODUÇÃO - timeout após $timeout segundos"
              echo "🔍 Verificando logs do container RabbitMQ..."
              docker logs "$RABBITMQ_CONTAINER" --tail 50 2>/dev/null || true
              exit 1
            fi
          else
            echo "❌ Container RabbitMQ não encontrado no Swarm PRODUÇÃO"
            exit 1
          fi

      - name: 📊 Service Status Report RabbitMQ
        timeout-minutes: 2
        run: |
          echo "📊 Final RabbitMQ service status report:"
          docker service ls --filter name="conexao-de-sorte-rabbitmq-production_*" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

          echo -e "\n💾 Volume usage:"
          docker volume ls | grep -E "(rabbitmq)" || echo "No RabbitMQ volumes found"

          echo -e "\n🌐 Network configuration:"
          docker network inspect conexao-network-swarm | jq '.[] | {Name: .Name, Driver: .Driver, Subnet: .IPAM.Config[0].Subnet}' || echo "⚠️  Rede conexao-network-swarm não encontrada"