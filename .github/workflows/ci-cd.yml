name: "🐰 RabbitMQ Infrastructure – CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: rabbitmq-infrastructure

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-rabbitmq-infraestrutura ]
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4.3.0

      - name: 🔎 Validar identificadores Azure (vars)
        id: check_secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
          AZURE_KEYVAULT_ENDPOINT: ${{ secrets.AZURE_KEYVAULT_ENDPOINT }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID AZURE_KEYVAULT_NAME; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '❌ GitHub Secrets obrigatórios ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "✅ Identificadores Azure configurados via secrets"
          # Key Vault opcional, Azure creds obrigatórios
          if [[ -n "${AZURE_KEYVAULT_NAME:-}" ]]; then
            echo "has_keyvault=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_keyvault=false" >> "$GITHUB_OUTPUT"
          fi
          if [[ -z "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
            echo 'ℹ️ AZURE_KEYVAULT_ENDPOINT não definido (usando endpoint padrão)'
          else
            echo '✅ Endpoint customizado definido'
          fi

      - name: Ensure Python deps
        run: |
          set -Eeuo pipefail
          if ! command -v python3 >/dev/null 2>&1; then
            echo '❌ python3 não está disponível no runner self-hosted.' >&2
            exit 1
          fi
          python3 -c "import importlib.util, subprocess, sys; import importlib; spec = importlib.util.find_spec('yaml'); subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', 'PyYAML']) if spec is None else None"
          echo "✅ Dependências Python disponíveis"

      - name: 🔐 Azure Login (OIDC)
        if: ${{ steps.check_secrets.outputs.has_azure_creds == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 📋 Confirmar consumo mínimo do Key Vault
        if: ${{ steps.check_secrets.outputs.has_keyvault == 'true' }}
        run: |
          echo 'Job de validação não consome segredos do Key Vault (lista vazia).'

      - name: Validate Docker Compose
        run: |
          # Validar sintaxe do docker-compose.yml
          docker compose -f docker-compose.yml config -q
          echo "✅ Docker Compose syntax is valid"

      - name: Security Validation
        run: |
          # Verificar se não há hardcoded passwords
          if grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "external:"; then
            echo "❌ Found potential hardcoded passwords"
            exit 1
          else
            echo "✅ No hardcoded passwords found"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.5.0
        with:
          name: rabbitmq-configs
          path: |
            docker-compose.yml

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-rabbitmq-infraestrutura ]
    timeout-minutes: 15
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: read
      id-token: write
    env:
      DOCKER_NETWORK_NAME: conexao-network-swarm
      STACK_NAME: conexao-rabbitmq
      COMPOSE_FILE: docker-compose.yml
    steps:
      - uses: actions/checkout@v4.3.0
        with:
          clean: true
          fetch-depth: 1

      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: rabbitmq-configs
          path: .

      - name: Get Key Vault secrets (RabbitMQ)
        id: kv
        if: ${{ steps.check_secrets.outputs.has_keyvault == 'true' }}
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_NAME }}
          secrets: |
            conexao-de-sorte-rabbitmq-username
            conexao-de-sorte-rabbitmq-password

      - name: Preparar secrets do RabbitMQ
        if: ${{ steps.check_secrets.outputs.has_keyvault == 'true' }}
        run: |
          set -Eeuo pipefail
          username="${{ steps.kv.outputs.conexao-de-sorte-rabbitmq-username }}"
          password="${{ steps.kv.outputs.conexao-de-sorte-rabbitmq-password }}"
          if [[ -z "$username" || -z "$password" ]]; then
            echo '❌ Segredos do RabbitMQ não retornados pelo Key Vault'
            exit 1
          fi
          echo "::add-mask::$username"
          echo "::add-mask::$password"
          if [[ ${#password} -lt 12 ]]; then
            echo '❌ Password muito curto (mínimo 12 caracteres)'
            exit 1
          fi
          username_file="$RUNNER_TEMP/rabbitmq_username"
          password_file="$RUNNER_TEMP/rabbitmq_password"
          printf '%s\n' "$username" > "$username_file"
          printf '%s\n' "$password" > "$password_file"
          chmod 600 "$username_file" "$password_file"
          printf 'RABBITMQ_USERNAME_FILE=%s\n' "$username_file" >> "$GITHUB_ENV"
          printf 'RABBITMQ_PASSWORD_FILE=%s\n' "$password_file" >> "$GITHUB_ENV"

      - name: Criar Docker secrets
        if: ${{ steps.check_secrets.outputs.has_keyvault == 'true' }}
        run: |
          set -Eeuo pipefail
          declare -A secrets=(
            [RABBITMQ_USERNAME]="$RABBITMQ_USERNAME_FILE"
            [RABBITMQ_PASSWORD]="$RABBITMQ_PASSWORD_FILE"
          )
          for secret_name in "${!secrets[@]}"; do
            file="${secrets[$secret_name]}"
            if [[ ! -f "$file" ]]; then
              echo "❌ Arquivo do secret $secret_name não encontrado ($file)"
              exit 1
            fi
            if docker secret ls --format "{{.Name}}" | grep -q "^${secret_name}$"; then
              echo "🔄 Atualizando secret ${secret_name}"
              docker secret rm "$secret_name" || true
              sleep 2
            else
              echo "🆕 Criando secret ${secret_name}"
            fi
            docker secret create "$secret_name" "$file"
          done
          echo "✅ Secrets do RabbitMQ prontos para o deploy"

      - name: 🔧 Garantir recursos Docker
        run: |
          set -Eeuo pipefail
          if ! docker volume ls | grep -q '\brabbitmq_data$'; then
            echo '📁 Criando volume rabbitmq_data'
            docker volume create rabbitmq_data
          else
            echo '✅ Volume rabbitmq_data já existe'
          fi
          echo '🛠️ Ajustando permissões do volume para UID 999'
          docker run --rm -v rabbitmq_data:/var/lib/rabbitmq alpine:3.20 \
            sh -c 'chown -R 999:999 /var/lib/rabbitmq' || echo 'ℹ️ Ajuste de permissões não aplicado (verificar manualmente)'
          if ! docker network ls | grep -q 'conexao-network-swarm'; then
            echo '🌐 Criando rede conexao-network-swarm'
            docker network create --driver overlay conexao-network-swarm
          else
            echo '✅ Rede conexao-network-swarm já existe'
          fi

      - name: 🚀 Deploy RabbitMQ Stack (Swarm-Only)
        env:
          STACK_NAME: conexao-rabbitmq
          COMPOSE_FILE: docker-compose.yml
        run: |
          echo "🚀 Iniciando deploy do RabbitMQ com Docker Swarm..."

          # Remover stack existente se houver
          if docker stack ls | grep -q "$STACK_NAME"; then
            echo "🔄 Removendo stack existente '$STACK_NAME'..."
            docker stack rm "$STACK_NAME"
            sleep 10
          fi

          # Deploy da nova stack
          echo "🏗️ Executando deploy da stack '$STACK_NAME'..."
          docker stack deploy -c "$COMPOSE_FILE" "$STACK_NAME"

          echo "⏰ Aguardando estabilização dos serviços RabbitMQ..."
          sleep 35

      - name: Healthcheck RabbitMQ (Multi-método)
        env:
          STACK_NAME: conexao-rabbitmq
        run: |
          echo "🔍 Validando saúde do RabbitMQ com health checks robustos..."

          # Aguardar até 3 minutos para RabbitMQ ficar disponível
          timeout=180
          elapsed=0
          health_passed=false

          while [ $elapsed -lt $timeout ] && [ "$health_passed" = false ]; do
            RABBITMQ_CONTAINER=$(docker ps -q -f name="${STACK_NAME}_rabbitmq" | head -1)

            if [ -n "$RABBITMQ_CONTAINER" ]; then
              echo "🔍 Testando health check do RabbitMQ... ($elapsed/$timeout segundos)"

              # Método 1: Comando nativo rabbitmq-diagnostics
              if docker exec "$RABBITMQ_CONTAINER" rabbitmq-diagnostics ping 2>/dev/null; then
                echo "✅ RabbitMQ health check passed (native command)"
                health_passed=true
                break
              fi

              # Método 2: Verificar logs de inicialização
              if docker logs "$RABBITMQ_CONTAINER" 2>/dev/null | grep -q "completed with.*plugins\\|Server startup complete\\|started TCP listener"; then
                echo "✅ RabbitMQ health check passed (logs validation)"
                health_passed=true
                break
              fi

              # Método 3: Verificar se portas estão ativas
              if docker exec "$RABBITMQ_CONTAINER" ss -tuln 2>/dev/null | grep -q ":5673 \\|:15673 "; then
                echo "✅ RabbitMQ health check passed (ports active)"
                health_passed=true
                break
              fi

              echo "⏳ RabbitMQ ainda não está pronto... ($elapsed/$timeout segundos)"
            else
              echo "⏳ Container RabbitMQ ainda não encontrado... ($elapsed/$timeout segundos)"
            fi

            sleep 10
            elapsed=$((elapsed + 10))
          done

          if [ "$health_passed" = false ]; then
            echo "⚠️ RabbitMQ health check não passou em $timeout segundos"
            echo "🔍 Verificando logs finais do RabbitMQ..."
            if [ -n "$RABBITMQ_CONTAINER" ]; then
              echo "--- Últimos 30 logs do RabbitMQ ---"
              docker logs "$RABBITMQ_CONTAINER" --tail 30 2>/dev/null || true
              echo "--- Fim dos logs ---"
            fi
            echo "💡 Nota: RabbitMQ pode estar funcionando mesmo com health check parcial"
            echo "💡 Verifique os logs acima para diagnóstico"
            exit 1
          else
            echo "✅ RabbitMQ health check concluído com sucesso!"
          fi

      - name: Connectivity Validation
        env:
          STACK_NAME: conexao-rabbitmq
        run: |
          echo "🔗 Validando conectividade do RabbitMQ..."

          # Verificar se o serviço está listado no Swarm
          if docker service ls | grep -q "${STACK_NAME}_rabbitmq"; then
            echo "✅ Serviço RabbitMQ encontrado no Swarm"
          else
            echo "❌ Serviço RabbitMQ não encontrado no Swarm"
            exit 1
          fi

          # Verificar se está na rede correta
          if docker network inspect conexao-network-swarm | grep -q rabbitmq; then
            echo "✅ RabbitMQ conectado à rede overlay"
          else
            echo "⚠️ RabbitMQ pode não estar na rede overlay correta"
          fi

          # Verificar endpoints específicos
          RABBITMQ_CONTAINER=$(docker ps -q -f name="${STACK_NAME}_rabbitmq" | head -1)
          if [ -n "$RABBITMQ_CONTAINER" ]; then
            # Testar Management UI
            if docker exec "$RABBITMQ_CONTAINER" ss -tuln 2>/dev/null | grep -q ":15673 "; then
              echo "✅ RabbitMQ Management UI ativo (porta 15673)"
            else
              echo "ℹ️ RabbitMQ Management UI não detectado"
            fi

            # Testar AMQP port
            if docker exec "$RABBITMQ_CONTAINER" ss -tuln 2>/dev/null | grep -q ":5673 "; then
              echo "✅ RabbitMQ AMQP port ativo (porta 5673)"
            else
              echo "ℹ️ RabbitMQ AMQP port não detectado"
            fi
          fi

          echo "📊 Status final dos serviços:"
          docker service ls --filter name="${STACK_NAME}_*" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"